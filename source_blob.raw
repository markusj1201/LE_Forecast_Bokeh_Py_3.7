{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decline Curve Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python and Bokeh can be used to perform a decline curve analysis on an example dataset. This demonstration of DCA in Python borrows heavily from excellent work done by Lukas Mosser. This uses the same methodology of curve fitting, but uses Bokeh for plotting, which is more appropriate for interacting with DCA analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DCA Theory\n",
    "\n",
    "Decline curves provide us with an empirical method to predict expected ultimate recovery and cummulative production of a reservoir.\n",
    "\n",
    "There are three classic types of decline curves: \n",
    "\n",
    "- Exponential decline\n",
    "- Hyperbolic decline\n",
    "- Harmonic decline\n",
    "\n",
    "The production rate as a function of time is given as follows:\n",
    "\n",
    "#### Exponential Decline\n",
    "$$q(\\Delta t)=q_i e^{-a\\Delta t}$$\n",
    "where $q_i$ is the initial rate, and $a$ is the decline rate. The exponential decline curve has one fitting parameter: $a$\n",
    "#### Hyperbolic Decline\n",
    "$$q(\\Delta t)=\\frac{q_i}{(1+ba_i\\Delta t)^{(\\frac{1}{b})}}$$\n",
    "where $q_i$ is the initial rate, and $a_i$ is the decline rate, $b$ fractional exponent. The hyperbolic decline curve has two fitting parameters: $a_i$ and $b$\n",
    "#### Harmonic Decline\n",
    "$$q(\\Delta t)=\\frac{q_i}{(1+a_i\\Delta t)}$$\n",
    "where $q_i$ is the initial rate, and $a_i$ is the decline rate. The harmonic decline curve has one fitting parameter: $a_i$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coding the DCA Equations\n",
    "\n",
    "In order to implement the DCA theoretical equations in Python, some libraries are needed for curve fitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.optimize import curve_fit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will also import a number of useful libraries for data manipulation and plotting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.pydata.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"37fd43eb-ea00-4a5f-b4e3-0128f554cd87\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof (root._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id !== undefined) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var element_id = msg.content.text.trim();\n",
       "            Bokeh.index[element_id].model.document.clear();\n",
       "            delete Bokeh.index[element_id];\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"37fd43eb-ea00-4a5f-b4e3-0128f554cd87\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n",
       "    }\n",
       "    finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.info(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(js_urls, callback) {\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = js_urls.length;\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var s = document.createElement('script');\n",
       "      s.src = url;\n",
       "      s.async = false;\n",
       "      s.onreadystatechange = s.onload = function() {\n",
       "        root._bokeh_is_loading--;\n",
       "        if (root._bokeh_is_loading === 0) {\n",
       "          console.log(\"Bokeh: all BokehJS libraries loaded\");\n",
       "          run_callbacks()\n",
       "        }\n",
       "      };\n",
       "      s.onerror = function() {\n",
       "        console.warn(\"failed to load library \" + url);\n",
       "      };\n",
       "      console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "    }\n",
       "  };var element = document.getElementById(\"37fd43eb-ea00-4a5f-b4e3-0128f554cd87\");\n",
       "  if (element == null) {\n",
       "    console.log(\"Bokeh: ERROR: autoload.js configured with elementid '37fd43eb-ea00-4a5f-b4e3-0128f554cd87' but no matching script tag was found. \")\n",
       "    return false;\n",
       "  }\n",
       "\n",
       "  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.16.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.16.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-0.12.16.min.js\"];\n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    \n",
       "    function(Bokeh) {\n",
       "      \n",
       "    },\n",
       "    function(Bokeh) {\n",
       "      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.css\");\n",
       "      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.css\");\n",
       "      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.16.min.css\");\n",
       "      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.16.min.css\");\n",
       "      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.16.min.css\");\n",
       "      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.16.min.css\");\n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if ((root.Bokeh !== undefined) || (force === true)) {\n",
       "      for (var i = 0; i < inline_js.length; i++) {\n",
       "        inline_js[i].call(root, root.Bokeh);\n",
       "      }if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"37fd43eb-ea00-4a5f-b4e3-0128f554cd87\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(js_urls, function() {\n",
       "      console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof (root._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"37fd43eb-ea00-4a5f-b4e3-0128f554cd87\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n    }\n    finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.info(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(js_urls, callback) {\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = js_urls.length;\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var s = document.createElement('script');\n      s.src = url;\n      s.async = false;\n      s.onreadystatechange = s.onload = function() {\n        root._bokeh_is_loading--;\n        if (root._bokeh_is_loading === 0) {\n          console.log(\"Bokeh: all BokehJS libraries loaded\");\n          run_callbacks()\n        }\n      };\n      s.onerror = function() {\n        console.warn(\"failed to load library \" + url);\n      };\n      console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.getElementsByTagName(\"head\")[0].appendChild(s);\n    }\n  };var element = document.getElementById(\"37fd43eb-ea00-4a5f-b4e3-0128f554cd87\");\n  if (element == null) {\n    console.log(\"Bokeh: ERROR: autoload.js configured with elementid '37fd43eb-ea00-4a5f-b4e3-0128f554cd87' but no matching script tag was found. \")\n    return false;\n  }\n\n  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.16.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.16.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-0.12.16.min.js\"];\n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    \n    function(Bokeh) {\n      \n    },\n    function(Bokeh) {\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.16.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.16.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.16.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.16.min.css\");\n    }\n  ];\n\n  function run_inline_js() {\n    \n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (var i = 0; i < inline_js.length; i++) {\n        inline_js[i].call(root, root.Bokeh);\n      }if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"37fd43eb-ea00-4a5f-b4e3-0128f554cd87\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(js_urls, function() {\n      console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import standard libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format ='retina'\n",
    "\n",
    "# Import Bokeh libraries\n",
    "from math import pi\n",
    "from bokeh.plotting import figure\n",
    "from bokeh.layouts import row\n",
    "from bokeh.io import output_notebook, show\n",
    "from bokeh.models import ColumnDataSource, PrintfTickFormatter\n",
    "output_notebook()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Also import the r2 score metric from sklearn for evaluating the quality of curve fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The curve_fit method takes in three parameters: \n",
    "```\n",
    "   popt, pcov = curve_fit(func, T, Q)\n",
    "```\n",
    "- The first parameter is a function, which can be passed as any variable. This function needs to take in the independent parameter as the first variable (time in this case) followed by any fitting parameters. \n",
    "- The second parameter is the independent variable (time in this case). \n",
    "- The third parameter is the observed data that we want to fit.\n",
    "\n",
    "The initial rate is fixed, but there is no functionality to pass the additional variable via **curve_fit**. So we can define functions inside a wrapper function to handle this.\n",
    "\n",
    "Defining the functions inside IF clauses, the function **decline_curve** then returns our selected decline curve function which is then passed to **curve_fit**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def decline_curve(curve_type, q_i):\n",
    "    if curve_type == \"exponential\":\n",
    "        def exponential_decline(T, a):\n",
    "            return q_i*np.exp(-a*T)\n",
    "        return exponential_decline\n",
    "    \n",
    "    elif curve_type == \"hyperbolic\":\n",
    "        def hyperbolic_decline(T, a_i, b):\n",
    "            return q_i/np.power((1+b*a_i*T), 1./b)\n",
    "        return hyperbolic_decline\n",
    "    \n",
    "    elif curve_type == \"harmonic\":\n",
    "        def parabolic_decline(T, a_i):\n",
    "            return q_i/(1+a_i*T)\n",
    "        return parabolic_decline\n",
    "    \n",
    "    else:\n",
    "        raise \"Error in curve selection!\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating the data\n",
    "\n",
    "We will generate synthetic production data using a curve decreaseing exponentially at 10% per time step with some additional random noise to simulate real production. We add random noise of +/-5% of oil rate. The maximum production rate is capped at Qi (10000 stb/d in this case)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({'T': np.arange(0,5.1, 0.1)})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Q'] = 10000 * np.exp(-0.1 * df['T'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a Gaussian multiplier around a mean of 1 +/- 5% to adjust the oil rate Q\n",
    "df['Q'] = df['Q'] * np.random.normal(loc=1, scale=0.05, size=len(df))\n",
    "\n",
    "# Set the rate at the noisy rate and cap the maximum value at 10000 stb/d\n",
    "df['Q'] = [x if x < 10000 else 10000 for x in df['Q']]\n",
    "\n",
    "# Set Qi at 10000 stb/d\n",
    "df.loc[0,'Q'] = 10000\n",
    "\n",
    "# Set the decimal points\n",
    "df['Q'] = round(df['Q'],3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>T</th>\n",
       "      <th>Q</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>10000.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.1</td>\n",
       "      <td>9599.355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.2</td>\n",
       "      <td>9956.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.3</td>\n",
       "      <td>9768.379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.4</td>\n",
       "      <td>9345.849</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     T          Q\n",
       "0  0.0  10000.000\n",
       "1  0.1   9599.355\n",
       "2  0.2   9956.264\n",
       "3  0.3   9768.379\n",
       "4  0.4   9345.849"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's calculate cumulative oil production. This is not strictly correct, because time is in years and rate is in days, but this is fine for proof of concept. A more correct approach would be to establish if rate were average or instantaneous and then deal with the oil production in a given time period before cumulating the production."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Qcum'] = df['Q'].shift().cumsum()\n",
    "df.fillna(value=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>T</th>\n",
       "      <th>Q</th>\n",
       "      <th>Qcum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>10000.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.1</td>\n",
       "      <td>9599.355</td>\n",
       "      <td>10000.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.2</td>\n",
       "      <td>9956.264</td>\n",
       "      <td>19599.355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.3</td>\n",
       "      <td>9768.379</td>\n",
       "      <td>29555.619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.4</td>\n",
       "      <td>9345.849</td>\n",
       "      <td>39323.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.5</td>\n",
       "      <td>8912.467</td>\n",
       "      <td>48669.847</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     T          Q       Qcum\n",
       "0  0.0  10000.000      0.000\n",
       "1  0.1   9599.355  10000.000\n",
       "2  0.2   9956.264  19599.355\n",
       "3  0.3   9768.379  29555.619\n",
       "4  0.4   9345.849  39323.998\n",
       "5  0.5   8912.467  48669.847"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's define our decline curves using our initial rate and our selected curve type. We then pass these on to **scipy.optimize.curve_fit** and compute the R2 of the resulting fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Instantiate decline functions\n",
    "exp_decline = decline_curve(\"exponential\", df['Q'][0])\n",
    "hyp_decline = decline_curve(\"hyperbolic\", df['Q'][0])\n",
    "har_decline = decline_curve(\"harmonic\", df['Q'][0])\n",
    "\n",
    "# Extract parameters defining best fit curves\n",
    "popt_exp, pcov_exp = curve_fit(exp_decline, df['T'], df['Q'], method=\"trf\")\n",
    "popt_hyp, pcov_hyp = curve_fit(hyp_decline, df['T'], df['Q'], method=\"trf\")\n",
    "popt_har, pcov_har = curve_fit(har_decline, df['T'], df['Q'], method=\"trf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define prediction of decline curves\n",
    "pred_exp = exp_decline(df['T'], popt_exp[0])\n",
    "pred_hyp = hyp_decline(df['T'], popt_hyp[0], popt_hyp[1])\n",
    "pred_har = har_decline(df['T'], popt_har[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 of exponential decline:  0.9311\n",
      "R2 of hyperbolic decline:  0.9342\n",
      "R2 of harmonic decline:  0.9083\n"
     ]
    }
   ],
   "source": [
    "# Print r2 scores to evaluate best fit\n",
    "print(\"R2 of exponential decline: \", round(r2_score(pred_exp, df['Q']),4))\n",
    "print(\"R2 of hyperbolic decline: \", round(r2_score(pred_hyp, df['Q']),4))\n",
    "print(\"R2 of harmonic decline: \", round(r2_score(pred_har, df['Q']),4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note** The Best Fit should always come out as hyperbolic, because the equation has more degrees of freedom to accomodate a best fit to the data. However, if the R2 value of the hyperbolic fit is close to either exponential or harmonic, then the engineer can decide whether or not to use a Harmonic or Exponential fit according to engineering judgment. Exponential is the conservative option and often used in reserves calculations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now visualise the results using bokeh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>T</th>\n",
       "      <th>Q</th>\n",
       "      <th>Qcum</th>\n",
       "      <th>hist_exp</th>\n",
       "      <th>hist_hyp</th>\n",
       "      <th>hist_har</th>\n",
       "      <th>cum_exp</th>\n",
       "      <th>cum_hyp</th>\n",
       "      <th>cum_har</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>10000.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.1</td>\n",
       "      <td>9599.355</td>\n",
       "      <td>10000.000</td>\n",
       "      <td>9899.515640</td>\n",
       "      <td>9904.288358</td>\n",
       "      <td>9880.914830</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.2</td>\n",
       "      <td>9956.264</td>\n",
       "      <td>19599.355</td>\n",
       "      <td>9800.040991</td>\n",
       "      <td>9809.239050</td>\n",
       "      <td>9764.632537</td>\n",
       "      <td>19899.515640</td>\n",
       "      <td>19904.288358</td>\n",
       "      <td>19880.914830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.3</td>\n",
       "      <td>9768.379</td>\n",
       "      <td>29555.619</td>\n",
       "      <td>9701.565907</td>\n",
       "      <td>9714.849256</td>\n",
       "      <td>9651.055317</td>\n",
       "      <td>29699.556631</td>\n",
       "      <td>29713.527408</td>\n",
       "      <td>29645.547367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.4</td>\n",
       "      <td>9345.849</td>\n",
       "      <td>39323.998</td>\n",
       "      <td>9604.080343</td>\n",
       "      <td>9621.116164</td>\n",
       "      <td>9540.089862</td>\n",
       "      <td>39401.122538</td>\n",
       "      <td>39428.376664</td>\n",
       "      <td>39296.602683</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     T          Q       Qcum      hist_exp      hist_hyp      hist_har  \\\n",
       "0  0.0  10000.000      0.000  10000.000000  10000.000000  10000.000000   \n",
       "1  0.1   9599.355  10000.000   9899.515640   9904.288358   9880.914830   \n",
       "2  0.2   9956.264  19599.355   9800.040991   9809.239050   9764.632537   \n",
       "3  0.3   9768.379  29555.619   9701.565907   9714.849256   9651.055317   \n",
       "4  0.4   9345.849  39323.998   9604.080343   9621.116164   9540.089862   \n",
       "\n",
       "        cum_exp       cum_hyp       cum_har  \n",
       "0      0.000000      0.000000      0.000000  \n",
       "1  10000.000000  10000.000000  10000.000000  \n",
       "2  19899.515640  19904.288358  19880.914830  \n",
       "3  29699.556631  29713.527408  29645.547367  \n",
       "4  39401.122538  39428.376664  39296.602683  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['hist_exp'] = exp_decline(df['T'], popt_exp[0])\n",
    "df['hist_hyp'] = hyp_decline(df['T'], popt_hyp[0], popt_hyp[1])\n",
    "df['hist_har'] = har_decline(df['T'], popt_har[0])\n",
    "\n",
    "df['cum_exp'] = df['hist_exp'].shift().cumsum()\n",
    "df['cum_hyp'] = df['hist_hyp'].shift().cumsum()\n",
    "df['cum_har'] = df['hist_har'].shift().cumsum()\n",
    "\n",
    "df.fillna(value=0,inplace=True)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we will use our decline curves to forecast the production."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select a duration for the forecast in years\n",
    "deltaT = 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up the forecast time array\n",
    "Tlist = []\n",
    "x = 0\n",
    "while x < deltaT:\n",
    "    x = round(x,1) + 0.1\n",
    "    Tlist.append(round(x,1))\n",
    "Tarray = np.asarray(Tlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the Forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Forecast time array starts at the end of the historical time\n",
    "T_fore = Tarray + max(df['T'])\n",
    "\n",
    "# Forecasts using three DCA types\n",
    "fore_exp = exp_decline(T_fore, popt_exp[0])\n",
    "fore_hyp = hyp_decline(T_fore, popt_hyp[0], popt_hyp[1])\n",
    "fore_har = har_decline(T_fore, popt_har[0])\n",
    "\n",
    "# Set up a prediction dataframe\n",
    "forecast = {\n",
    "    'T' : T_fore,\n",
    "    'fore_exp' : fore_exp,\n",
    "    'fore_hyp' : fore_hyp,\n",
    "    'fore_har' : fore_har\n",
    "}\n",
    "\n",
    "df_forecast = pd.DataFrame(forecast)\n",
    "\n",
    "# Add cumulative volumes to the prediction dataframe\n",
    "df_forecast['cum_exp'] = df_forecast['fore_exp'].shift().cumsum() + df['Qcum'].max()\n",
    "df_forecast['cum_hyp'] = df_forecast['fore_hyp'].shift().cumsum() + df['Qcum'].max()\n",
    "df_forecast['cum_har'] = df_forecast['fore_har'].shift().cumsum() + df['Qcum'].max()\n",
    "\n",
    "df_forecast.fillna(value=df['Qcum'].max(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>T</th>\n",
       "      <th>fore_exp</th>\n",
       "      <th>fore_hyp</th>\n",
       "      <th>fore_har</th>\n",
       "      <th>cum_exp</th>\n",
       "      <th>cum_hyp</th>\n",
       "      <th>cum_har</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>5974.633259</td>\n",
       "      <td>5905.615931</td>\n",
       "      <td>6193.277376</td>\n",
       "      <td>394660.210000</td>\n",
       "      <td>394660.210000</td>\n",
       "      <td>394660.210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.2</td>\n",
       "      <td>5914.597539</td>\n",
       "      <td>5840.183960</td>\n",
       "      <td>6147.392245</td>\n",
       "      <td>400634.843259</td>\n",
       "      <td>400565.825931</td>\n",
       "      <td>400853.487376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.3</td>\n",
       "      <td>5855.165084</td>\n",
       "      <td>5775.276369</td>\n",
       "      <td>6102.182026</td>\n",
       "      <td>406549.440798</td>\n",
       "      <td>406406.009891</td>\n",
       "      <td>407000.879621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.4</td>\n",
       "      <td>5796.329833</td>\n",
       "      <td>5710.890571</td>\n",
       "      <td>6057.631938</td>\n",
       "      <td>412404.605883</td>\n",
       "      <td>412181.286260</td>\n",
       "      <td>413103.061647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.5</td>\n",
       "      <td>5738.085784</td>\n",
       "      <td>5647.023988</td>\n",
       "      <td>6013.727627</td>\n",
       "      <td>418200.935716</td>\n",
       "      <td>417892.176831</td>\n",
       "      <td>419160.693585</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     T     fore_exp     fore_hyp     fore_har        cum_exp        cum_hyp  \\\n",
       "0  5.1  5974.633259  5905.615931  6193.277376  394660.210000  394660.210000   \n",
       "1  5.2  5914.597539  5840.183960  6147.392245  400634.843259  400565.825931   \n",
       "2  5.3  5855.165084  5775.276369  6102.182026  406549.440798  406406.009891   \n",
       "3  5.4  5796.329833  5710.890571  6057.631938  412404.605883  412181.286260   \n",
       "4  5.5  5738.085784  5647.023988  6013.727627  418200.935716  417892.176831   \n",
       "\n",
       "         cum_har  \n",
       "0  394660.210000  \n",
       "1  400853.487376  \n",
       "2  407000.879621  \n",
       "3  413103.061647  \n",
       "4  419160.693585  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_forecast.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choose the forecast decline type to use: 'exp', 'har', 'hyp'\n",
    "def forecast_picker(dca_type):\n",
    "    forecast_type = 'fore_{}'.format(dca_type)\n",
    "    cum_type = 'cum_{}'.format(dca_type)\n",
    "    \n",
    "    return (forecast_type, cum_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pick a forecast: 'exp', 'har', 'hyp'\n",
    "forecast_type, cum_type = forecast_picker('hyp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div class=\"bk-root\">\n",
       "    <div class=\"bk-plotdiv\" id=\"b57c1c19-71f4-43b5-815a-50282f2ee5e0\"></div>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"7cb92d7f-2532-495b-8fdc-ad16bf9912b9\":{\"roots\":{\"references\":[{\"attributes\":{\"callback\":null},\"id\":\"47fde142-ebb5-4b3f-8d63-3b56ddac8cc0\",\"type\":\"DataRange1d\"},{\"attributes\":{\"line_color\":\"green\",\"line_width\":2,\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"hist_hyp\"}},\"id\":\"e19401b2-3270-47cc-8fa7-e6a0c6d21fe7\",\"type\":\"Line\"},{\"attributes\":{\"line_color\":\"red\",\"line_width\":2,\"x\":{\"field\":\"cum_exp\"},\"y\":{\"field\":\"hist_exp\"}},\"id\":\"2e47e18d-5212-4454-8ac8-d49cdfd56320\",\"type\":\"Line\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"hist_hyp\"}},\"id\":\"708b7403-50ea-4de9-ad1b-e4c10390ae60\",\"type\":\"Line\"},{\"attributes\":{\"data_source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"e19401b2-3270-47cc-8fa7-e6a0c6d21fe7\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"708b7403-50ea-4de9-ad1b-e4c10390ae60\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"c12cd9f4-b07d-4473-9c4d-81317a7f23de\",\"type\":\"CDSView\"}},\"id\":\"ad626066-2706-4fbf-bec0-8c94e25a74f0\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"}},\"id\":\"c12cd9f4-b07d-4473-9c4d-81317a7f23de\",\"type\":\"CDSView\"},{\"attributes\":{\"below\":[{\"id\":\"bd2624c6-9f3a-4c6d-92f8-4c777849ac96\",\"type\":\"LinearAxis\"}],\"left\":[{\"id\":\"43789f52-fec9-4e05-a701-630be32f6f29\",\"type\":\"LinearAxis\"}],\"plot_height\":450,\"plot_width\":450,\"renderers\":[{\"id\":\"bd2624c6-9f3a-4c6d-92f8-4c777849ac96\",\"type\":\"LinearAxis\"},{\"id\":\"91be3e8d-8240-4fd6-9d6b-90516951ad8f\",\"type\":\"Grid\"},{\"id\":\"43789f52-fec9-4e05-a701-630be32f6f29\",\"type\":\"LinearAxis\"},{\"id\":\"e1133975-a6dc-4e7b-adc5-317d149bd97b\",\"type\":\"Grid\"},{\"id\":\"eee3de91-63b5-4ce4-b539-0f4c464815a3\",\"type\":\"BoxAnnotation\"},{\"id\":\"8988347d-9442-4bc4-bfb0-6189debe21e1\",\"type\":\"BoxAnnotation\"},{\"id\":\"46851496-890d-40f6-9843-ab02406783c1\",\"type\":\"GlyphRenderer\"},{\"id\":\"43503546-8296-41b1-a66d-bd6f3f20f253\",\"type\":\"Legend\"},{\"id\":\"3d3f9660-ca65-4903-b3dd-a8a004712d8f\",\"type\":\"GlyphRenderer\"},{\"id\":\"8fb1ff19-22eb-47da-a19b-1530fc173876\",\"type\":\"GlyphRenderer\"},{\"id\":\"015de84c-5598-4d18-91e7-14557b9c8e56\",\"type\":\"GlyphRenderer\"},{\"id\":\"cffc0a1f-54e5-4434-8e03-8d214f86cc5a\",\"type\":\"GlyphRenderer\"}],\"title\":{\"id\":\"1ebabe3a-7532-41fe-af40-6b942683235a\",\"type\":\"Title\"},\"toolbar\":{\"id\":\"f66d09ef-b1a0-4129-b386-961c685a4c27\",\"type\":\"Toolbar\"},\"x_range\":{\"id\":\"e638936f-a483-4d66-9f82-a11b5685e3de\",\"type\":\"DataRange1d\"},\"x_scale\":{\"id\":\"429f6133-8adb-4ca4-a13b-0c0a749e9581\",\"type\":\"LinearScale\"},\"y_range\":{\"id\":\"47fde142-ebb5-4b3f-8d63-3b56ddac8cc0\",\"type\":\"DataRange1d\"},\"y_scale\":{\"id\":\"e33d5b8e-0f78-4428-ac9c-68b7f145f040\",\"type\":\"LinearScale\"}},\"id\":\"5f4fe23a-3a49-436b-97bb-fd99bdeedb75\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"label\":{\"value\":\"Hyperbolic\"},\"renderers\":[{\"id\":\"ad626066-2706-4fbf-bec0-8c94e25a74f0\",\"type\":\"GlyphRenderer\"}]},\"id\":\"d2fbe0dc-ae62-46e7-bce6-7d166617340b\",\"type\":\"LegendItem\"},{\"attributes\":{\"line_color\":\"blue\",\"line_width\":2,\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"hist_har\"}},\"id\":\"3e1d0dcd-6c09-4f0f-8471-23fd5464312e\",\"type\":\"Line\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"hist_har\"}},\"id\":\"ea8eca9e-ccc6-4a03-89bc-20b92fce8001\",\"type\":\"Line\"},{\"attributes\":{\"source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"}},\"id\":\"18e02df3-2a6c-4629-9927-32669a1ccef6\",\"type\":\"CDSView\"},{\"attributes\":{\"data_source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"3e1d0dcd-6c09-4f0f-8471-23fd5464312e\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"ea8eca9e-ccc6-4a03-89bc-20b92fce8001\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"18e02df3-2a6c-4629-9927-32669a1ccef6\",\"type\":\"CDSView\"}},\"id\":\"956ffbfb-3ed4-42bd-9916-57baabb3a63e\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"label\":{\"value\":\"Exponential\"},\"renderers\":[{\"id\":\"3d3f9660-ca65-4903-b3dd-a8a004712d8f\",\"type\":\"GlyphRenderer\"}]},\"id\":\"e4054dfa-ca9d-4681-9b7a-80c35376bce6\",\"type\":\"LegendItem\"},{\"attributes\":{\"label\":{\"value\":\"Harmonic\"},\"renderers\":[{\"id\":\"956ffbfb-3ed4-42bd-9916-57baabb3a63e\",\"type\":\"GlyphRenderer\"}]},\"id\":\"0d164abe-5fa8-465a-a9b9-c5f489159790\",\"type\":\"LegendItem\"},{\"attributes\":{\"line_color\":\"orange\",\"line_width\":2,\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"fore_hyp\"}},\"id\":\"a9f225c7-b219-4adf-a8b4-f5f2b9a2f1f3\",\"type\":\"Line\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"fore_hyp\"}},\"id\":\"9eee3935-a618-46ed-9846-447f0de91cb8\",\"type\":\"Line\"},{\"attributes\":{\"source\":{\"id\":\"bd7d62d8-3fba-4045-9465-9cdc407d3eb3\",\"type\":\"ColumnDataSource\"}},\"id\":\"692aa087-b97d-4865-90d7-29b8d7cccd7a\",\"type\":\"CDSView\"},{\"attributes\":{\"data_source\":{\"id\":\"bd7d62d8-3fba-4045-9465-9cdc407d3eb3\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"a9f225c7-b219-4adf-a8b4-f5f2b9a2f1f3\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"9eee3935-a618-46ed-9846-447f0de91cb8\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"692aa087-b97d-4865-90d7-29b8d7cccd7a\",\"type\":\"CDSView\"}},\"id\":\"c61d1354-856a-49c2-9101-44adbda22faf\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"data_source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"3de2a1fd-1fef-4d7a-9763-a3e52fb09e89\",\"type\":\"Circle\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"10a8035c-e96b-4d8d-a83a-9650fcdfe60b\",\"type\":\"Circle\"},\"selection_glyph\":null,\"view\":{\"id\":\"2cd37407-feb2-4ff0-b30d-ff407403415b\",\"type\":\"CDSView\"}},\"id\":\"46851496-890d-40f6-9843-ab02406783c1\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"label\":{\"value\":\"Forecast\"},\"renderers\":[{\"id\":\"c61d1354-856a-49c2-9101-44adbda22faf\",\"type\":\"GlyphRenderer\"}]},\"id\":\"c5dc4769-7137-409e-9bfb-b987c32d1f23\",\"type\":\"LegendItem\"},{\"attributes\":{\"plot\":null,\"text\":\"Rate Cum Plot\"},\"id\":\"1ebabe3a-7532-41fe-af40-6b942683235a\",\"type\":\"Title\"},{\"attributes\":{\"callback\":null},\"id\":\"e638936f-a483-4d66-9f82-a11b5685e3de\",\"type\":\"DataRange1d\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b4\"},\"line_color\":{\"value\":\"#1f77b4\"},\"line_width\":{\"value\":2},\"size\":{\"units\":\"screen\",\"value\":5},\"x\":{\"field\":\"Qcum\"},\"y\":{\"field\":\"Q\"}},\"id\":\"3de2a1fd-1fef-4d7a-9763-a3e52fb09e89\",\"type\":\"Circle\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"303fced3-3d5d-4b15-a329-bb5f367c0ed4\",\"type\":\"PanTool\"},{\"id\":\"11f7ea0d-6031-44c4-ab12-24b009a57784\",\"type\":\"BoxSelectTool\"},{\"id\":\"c0019ceb-73c4-4b66-b35c-d90a9bcc900f\",\"type\":\"BoxZoomTool\"},{\"id\":\"a53e8922-eb4d-4450-b607-39fc6afaa234\",\"type\":\"ResetTool\"}]},\"id\":\"f66d09ef-b1a0-4129-b386-961c685a4c27\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"e33d5b8e-0f78-4428-ac9c-68b7f145f040\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"429f6133-8adb-4ca4-a13b-0c0a749e9581\",\"type\":\"LinearScale\"},{\"attributes\":{\"plot\":{\"id\":\"5f4fe23a-3a49-436b-97bb-fd99bdeedb75\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"ticker\":{\"id\":\"d0b087b2-7b1e-4dcb-a7d6-96de823a8a07\",\"type\":\"BasicTicker\"}},\"id\":\"91be3e8d-8240-4fd6-9d6b-90516951ad8f\",\"type\":\"Grid\"},{\"attributes\":{\"axis_label\":\"Cum Oil (stb)\",\"formatter\":{\"id\":\"60242735-0093-48d2-b7d2-a352e7b50c8b\",\"type\":\"BasicTickFormatter\"},\"major_label_orientation\":0.7853981633974483,\"plot\":{\"id\":\"5f4fe23a-3a49-436b-97bb-fd99bdeedb75\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"ticker\":{\"id\":\"d0b087b2-7b1e-4dcb-a7d6-96de823a8a07\",\"type\":\"BasicTicker\"}},\"id\":\"bd2624c6-9f3a-4c6d-92f8-4c777849ac96\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"d0b087b2-7b1e-4dcb-a7d6-96de823a8a07\",\"type\":\"BasicTicker\"},{\"attributes\":{\"plot\":{\"id\":\"f8832e17-53c0-428e-8e1e-3850a26d662e\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"ticker\":{\"id\":\"2b8e3c56-f0fa-4ef4-8f1f-68e664de3f03\",\"type\":\"BasicTicker\"}},\"id\":\"bca2893e-9aa1-4a5b-a48d-c8cb8ada1c0b\",\"type\":\"Grid\"},{\"attributes\":{\"axis_label\":\"Oil Rate (Mstb/d)\",\"formatter\":{\"id\":\"2f28d951-f51e-419e-b9da-d3a60b0c0bd1\",\"type\":\"BasicTickFormatter\"},\"plot\":{\"id\":\"5f4fe23a-3a49-436b-97bb-fd99bdeedb75\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"ticker\":{\"id\":\"d4e05c66-5885-420c-854f-b8bc1c106e5e\",\"type\":\"BasicTicker\"}},\"id\":\"43789f52-fec9-4e05-a701-630be32f6f29\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"d4e05c66-5885-420c-854f-b8bc1c106e5e\",\"type\":\"BasicTicker\"},{\"attributes\":{\"dimension\":1,\"plot\":{\"id\":\"5f4fe23a-3a49-436b-97bb-fd99bdeedb75\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"ticker\":{\"id\":\"d4e05c66-5885-420c-854f-b8bc1c106e5e\",\"type\":\"BasicTicker\"}},\"id\":\"e1133975-a6dc-4e7b-adc5-317d149bd97b\",\"type\":\"Grid\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"line_width\":{\"value\":2},\"size\":{\"units\":\"screen\",\"value\":5},\"x\":{\"field\":\"Qcum\"},\"y\":{\"field\":\"Q\"}},\"id\":\"10a8035c-e96b-4d8d-a83a-9650fcdfe60b\",\"type\":\"Circle\"},{\"attributes\":{\"source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"}},\"id\":\"bfc221fe-e93e-4444-bca2-b047d03136b9\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"c5273fb1-b804-4ce8-a916-ab85e0974fae\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"303fced3-3d5d-4b15-a329-bb5f367c0ed4\",\"type\":\"PanTool\"},{\"attributes\":{\"callback\":null,\"data\":{\"T\":{\"__ndarray__\":\"ZmZmZmZmFEDNzMzMzMwUQDMzMzMzMxVAmpmZmZmZFUAAAAAAAAAWQGZmZmZmZhZAzczMzMzMFkAzMzMzMzMXQJqZmZmZmRdAAAAAAAAAGEBmZmZmZmYYQM3MzMzMzBhAMzMzMzMzGUCamZmZmZkZQAAAAAAAABpAZmZmZmZmGkDNzMzMzMwaQDMzMzMzMxtAmpmZmZmZG0AAAAAAAAAcQGZmZmZmZhxAzczMzMzMHEAzMzMzMzMdQJqZmZmZmR1AAAAAAAAAHkBmZmZmZmYeQM3MzMzMzB5AMzMzMzMzH0CamZmZmZkfQAAAAAAAACBAMzMzMzMzIEBmZmZmZmYgQJqZmZmZmSBAzczMzMzMIEAAAAAAAAAhQDMzMzMzMyFAZmZmZmZmIUCamZmZmZkhQM3MzMzMzCFAAAAAAAAAIkAzMzMzMzMiQGZmZmZmZiJAmpmZmZmZIkDNzMzMzMwiQAAAAAAAACNAMzMzMzMzI0BmZmZmZmYjQJqZmZmZmSNAzczMzMzMI0AAAAAAAAAkQDMzMzMzMyRAZmZmZmZmJECamZmZmZkkQM3MzMzMzCRAAAAAAAAAJUAzMzMzMzMlQGZmZmZmZiVAmpmZmZmZJUDNzMzMzMwlQAAAAAAAACZAMzMzMzMzJkBmZmZmZmYmQJqZmZmZmSZAzczMzMzMJkAAAAAAAAAnQDMzMzMzMydAZmZmZmZmJ0CamZmZmZknQM3MzMzMzCdAAAAAAAAAKEA=\",\"dtype\":\"float64\",\"shape\":[70]},\"cum_exp\":{\"__ndarray__\":\"cj0K15AWGEGaSX9f63MYQfOaYMNV0BhBJoRsbNIrGUGcQiy+Y4YZQUD2AxYM4BlBLnBCy804GkG22DAvq5AaQSAtIo2m5xpBlpWCKsI9G0Gck+ZGAJMbQXgJGhxj5xtB9Bov3uw6HEHY54y7n40cQYAg/tx93xxB9XS/ZYkwHUHg3o1zxIAdQbvGtB4x0B1BpAQcetEeHkEnvVWTp2weQVwarHK1uR5BvuEuG/0FH0EK58CKgFEfQY5cJbpBnB9BLAENnULmH0FAlhGRwhcgQbhcjZkFPCBBxWddWutfIEG4xXXDdIMgQWBDYcKipiBB4Z9HQnbJIEGOsPMr8OsgQQF12WURDiFBjRsc1NovIUEy9pNYTVEhQUBg1NJpciFB1ZQxIDGTIUFLdsYbpLMhQdJGep7D0yFBTVIGf5DzIUGgifuRCxMiQZIPyKk1MiJBY7e8lg9RIkFKdRInmm8iQefA7ybWjSJB6ultYMSrIkH4Xp6bZckiQQLnj5665iJBKs1TLcQDI0Fe/wIKgyAjQcQfw/T3PCNBG4nLqyNZI0E8RmrrBnUjQcj8CG6ikCNBPssx7ParI0GAGpQcBccjQfZiCbTN4SNBdOWZZVH8I0HsV4HikBYkQSaGM9qMMCRBiOZg+kVKJEEeI/vuvGMkQeiWOWLyfCRBsr+d/OaVJEFopPdkm64kQSEwakAQxyRB/IFvMkbfJEHaMd3cPfckQSKK6N/3DiVBrLYq2nQmJUE=\",\"dtype\":\"float64\",\"shape\":[70]},\"cum_har\":{\"__ndarray__\":\"cj0K15AWGEFd0hLzVXcYQbt0u4Rj1xhBkXsgP7w2GUGkPDvGYpUZQa5jUq9Z8xlB1T5mgaNQGkHMLJm1Qq0aQchWlLc5CRtBRd7o5YpkG0HdpG2SOL8bQUnSmQJFGRxBMDvcb7JyHEGFye8Hg8scQdYFLe24Ix1BOt/YNlZ7HUFuznDxXNIdQRFv9B7PKB5B6qgst65+HkHNgfCn/dMeQbKvZ9W9KB9BUwFLGvF8H0HcsiJImdAfQYhhwRPcESBBPK4ivCc7IEGlsuF4MGQgQfKjhSH3jCBBegKLiXy1IEHMT32Awd0gQZP5D9LGBSFByoA2Ro0tIUFb5DuhFVUhQRhW2aNgfCFBkEBMC2+jIUEZpGuRQcohQQDRvOzY8CFBxoSH0DUXIkHcb+nsWD0iQTYp6e5CYyJB0pSIgPSIIkEZwtZIbq4iQcFGAeyw0yJBvhplC734IkGQ+Z5Fkx0jQRtNmzY0QiNBAKald6BmI0FVxXef2IojQWc7SELdriNBF5/Y8a7SI0E2YYM9TvYjQSY/SbK7GSRB9Ffe2vc8JEHe5rY/A2AkQUymE2fegiRB690N1YmlJEHFHqMLBsgkQc6vwIpT6iRBfa1O0HIMJUHc3jpYZC4lQVJCg5woUCVBglRAFcBxJUFOE684K5MlQSK/OntqtCVBilyGT37VJUEF+HUmZ/YlQeatN28lFyZBKnhMl7k3JkHqw5AKJFgmQSXQRDNleCZBftcUen2YJkE=\",\"dtype\":\"float64\",\"shape\":[70]},\"cum_hyp\":{\"__ndarray__\":\"cj0K15AWGEF40MBN13IYQeLaIAoYzhhBIjkhJVUoGUFtJxO1kIEZQWp+o83M2RlBU/DbfwsxGkF8RiTaTocaQT2fQ+iY3BpBVqxhs+swG0Gv8QdCSYQbQY4EI5iz1htBMssDtywoHEHgvGCdtngcQVYiV0dTyBxBuFZsrgQXHUHcCI/JzGQdQQ99GI2tsR1BRs/N6qj9HUG8NeHRwEgeQQZE8y73kh5BkC4U7E3cHkGUDsXwxiQfQXcm+SFkbB9BpyYXYiezH0HecvqQEvkfQfAz+sUTHyBB19DmFjRBIEEQoWMn62IgQQYcTuI5hCBBZkNBMSGlIEEhR5b8ocUgQawpZSu95SBBd2SFo3MFIUGmjI5JxiQhQfz32AC2QyFBEGJ+q0NiIUGwkVoqcIAhQZD+C108niFBKnf0Iam7IUHgxjlWt9ghQWNcxtVn9SFBSvBJe7sRIkH2Kzogsy0iQahQ05xPSSJB5N4YyJFkIkEHPtZ3en8iQSJkn4AKmiJBGH7RtUK0IkH6l5PpI84iQZ5F1+yu5yJBhktZj+QAI0H4R6KfxRkjQWBcB+tSMiNB+NaqPY1KI0Gq3HxidWIjQToTPCMMeiNBsUt2SFKRI0EQLYmZSKgjQULfotzvviNBULbC1kjVI0Ho3blLVOsjQRIFLP4SASRBQwqQr4UWJEGipzAgrSskQaAfLQ+KQCRBzul5Oh1VJEEEYOFeZ2kkQcFrBDhpfSRB5DNbgCORJEE=\",\"dtype\":\"float64\",\"shape\":[70]},\"fore_exp\":{\"__ndarray__\":\"EApDHaJWt0AvVlT4mBq3QKpM+kIq37ZAgJ3vb1SktkAi6ez1FWq2QJJ7nk9tMLZA+SGa+1j3tUBrGlV81761QHUdGljnhrVAb4H/GIdPtUAGd91MtRi1QAVfRIVw4rRA6DhzV7estEAMKk5ciHe0QEsdVTDiQrRAo3qac8MOtEDL9rnJKtuzQG16z9kWqLNAtyBuToZ1s0AwTZfVd0OzQF7YsSDqEbNAN1OB5NvgskACYR3ZS7CyQHYn6bk4gLJA5tSKRaFQskAxPOM9hCGyQFaGBWjg8rFAVfkujLTEsUBE1L51/5axQE9ALvO/abFAc1YI1vQ8sUDEOeLynBCxQPpFUyG35LBAJFLtO0K5sEA9BzUgPY6wQHpKmq6mY7BAGbtwyn05sECEQ+hZwQ+wQB97C4zgzK9ATFM39RJ7r0Bp8YXMFyqvQEDRp/Ts2a5AOOa9VZCKrkBZnUvd/zuuQEkDKX457q1A+A11MDuhrUCCCYjxAlWtQBEo5sOOCa1APTQyr9y+rECoZSDA6nSsQIdXaQi3K6xApyC9nj/jq0CnjLaegpurQB92zih+VKtAN0FPYjAOq0B/dkh1l8iqQLx9gpCxg6pAH3hy53w/qkDhOS6y9/upQLdiYC0gualA7JQ8mvR2qUDOynM+czWpQBnKKGSa9KhAIbXkWWi0qEBUuYty23SoQO/aUQXyNahAa92vbar3p0CUSFgLA7qnQMGJLEL6fKdACzEyeo5Ap0A=\",\"dtype\":\"float64\",\"shape\":[70]},\"fore_har\":{\"__ndarray__\":\"pzolAkcxuECvlyhqZAO4QF+1QZku1rdAzESwxqGpt0B/wslFun23QK7J9oR0UrdA9H27DM0nt0DEfsp+wP22QGHfIZVL1LZA8qUxIWurtkAKWwsLHIO2QJ45mlBbW7ZAdpXjBCY0tkAOFE9PeQ22QBpZ9mpS57VACs37pa7BtUDCKOhgi5y1QBR2Dg7md7VA8zj2MLxTtUApectdCzC1QClo1DjRDLVAKmLsdQvqtED0DATYt8e0QAhapjDUpbRAlzSCX16EtEC6pvhRVGO0QNZDrwK0QrRApKgmeXsitECz41TJqAK0QGGbQxM647NAdMixgi3Es0Br3rhOgaWzQIM8dbkzh7NAMcSxD0Nps0B6c5aorUuzQD7jWeVxLrNA8or1MI4Rs0C0rNz/APWyQCnOtc/I2LJAjqMWJ+S8skDpU0KVUaGyQE7+6bEPhrJAIGnvHB1rskCgxSl+eFCyQJtyLIUgNrJAaaoP6RMcskAICTtoUQKyQBLYMcjX6LFAMQ9h1aXPsUAw+O5iuraxQN9mjEoUnrFAbXVHbLKFsUCUtl+uk22xQKPPG/22VbFABW2gShs+sUBOhMiOvyaxQLzX/saiD7FAJq8Y9sP4sEBDuzEkIuKwQFQYiV68y7BA6mVft5G1sEDA6dVFoZ+wQDa0ziXqibBALb3Nd2t0sECR8NpgJF+wQBIiZQoUSrBA/d8lojk1sEBvHQZalCCwQGusA2gjDLBATgEvDMzvr0A=\",\"dtype\":\"float64\",\"shape\":[70]},\"fore_hyp\":{\"__ndarray__\":\"dMGkrZ0Rt0B0mgIYL9C2QBmQF8BGj7ZAppJ7/ONOtkBKvxUkBg+2QGp6HI6sz7VACIoVktaQtUBRMNaHg1K1QDxGg8eyFLVAXlaRqWPXtEDGt8SGlZq0QAGpMbhHXrRARGs8l3kitECiXZl9KuezQH4YTcVZrLNABImsyAZys0DTDF3iMDizQLmNVG3X/rJAmJ3ZxPnFskB0koNEl42yQJGiOkivVbJAxAA4LEEeskDT+AVNTOexQAEMgAfQsLFAzw3TuMt6sUC2QH2+PkWxQCxzTnYoELFAtBxoPojbsEAVez11XaewQMSvk3mnc7BAY92BqmVAsEBkRXFnlw2wQLDLOiB4tq9Ayi4oCaZSr0CfVmtKt++uQIwTaqWqja5AeKAv3H4srkDa32yxMsytQC+ZeOjEbK1AkLZPRTQOrUC5gpWMf7CsQE3nk4OlU6xAcKs78KT3q0CxsiSZfJyrQEY8jkUrQqtAlCJfva/oqkARGybJCJCqQHr2GTI1OKpAWuEZwjPhqUDepK1DA4upQBHoBYKiNalAVnH8SBDhqEBUaBRlS42oQCGYeqNSOqhA3bEF0iTop0CMjza/wJanQGB3ODolRqdAW1/hElH2pkBEMbIZQ6emQPwO1x/6WKZAMZcn93QLpkB2Kidysr6lQK4wBWSxcqVA3l6doHAnpUBo/Xf87tykQJAuykwrk6RAfjV2ZyRKpECbvQsj2QGkQEwiyFZIuqNAGbeW2nBzo0A=\",\"dtype\":\"float64\",\"shape\":[70]},\"index\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69]},\"selected\":{\"id\":\"9be46038-0e40-4ae9-be26-715fbab801c5\",\"type\":\"Selection\"},\"selection_policy\":{\"id\":\"805d4d26-1984-43fd-8e7d-b0bbb6babe67\",\"type\":\"UnionRenderers\"}},\"id\":\"bd7d62d8-3fba-4045-9465-9cdc407d3eb3\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"2f28d951-f51e-419e-b9da-d3a60b0c0bd1\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"callback\":null,\"data\":{\"Q\":{\"__ndarray__\":\"AAAAAACIw0AK16Nwrb/CQBKDwMohcsNAmG4SgzAUw0AnMQis7EDCQJ7vp8Y7aMFAN4lBYCVowkDjpZvE0KjCQM/3U+O1cMJA3SQGgWWxwUBCYOXQAsHBQEJg5dBS4cFAaJHtfP8OwUAIrBxatLzBQOOlm8SAIsFAhetRuF5bwEDufD81rlrBQLgehetBdsBAAiuHFlnavUCsHFpku42/QOf7qfGy2MBAj8L1KJyiwEBzaJHtLKPAQBkEVg4tJb9AWDm0yNb3v0D8qfHSbT+8QD0K16PwGL5ATDeJQWARu0C+nxovPQm8QJzEILBSdr9AZmZmZqZavUC4HoXrEfi7QHE9CtcDl7xAQmDl0IKAvUDZzvdTAzm7QM/3U+MFybtA5dAi29m6ukApXI/CtSS6QF66SQziW7tAke18P7V4uUDl0CLbuUy7QHnpJjEIrrpA+FPjpXuht0B7FK5HATm6QNNNYhC4aLlA5/up8dI+t0C4HoXr8ay5QGIQWDkU67ZAZmZmZka6uEBSuB6FKzu3QKAaL93EBbdA\",\"dtype\":\"float64\",\"shape\":[51]},\"Qcum\":{\"__ndarray__\":\"AAAAAAAAAAAAAAAAAIjDQIXrUbjWI9NADi2ynefc3EAtsp3vfzPjQHe+nxq7w+dAXrpJDMod7EBWDi2y6VvwQBKDwMoDsfJADAIrhxr/9ECoxks3RzX3QLByaJFnbflAuB6F65Gp+0Dl0CLbccv9QDMzMzOEAQBBke18P6wTAUFJDAIrYhkCQRgEVg4NLwNBBFYOLXE2BEFcj8L1QyUFQUFg5dCxIQZB/////zwvB0EoXI/CZjkIQa9yaJGZQwlB0CLb+cI8CkGbxCCwgTwLQetRuB59HgxBPQrXo0QPDUH3U+Olz+cNQfUoXI8ZyA5BGi/dJMzDD0EnMQisUFcQQaJFtvMwxxBBmG4SA405EUEZBFYOj68RQVTjpRtzHBJBMzMzM5eLEkF3vp+agvYSQej7qXEVXxNB0SLb+YTME0GHFtnOZzIUQcuhRbaanxRBcT0K11IKFUHByqHF2GgVQRODwMq80RVBSgwCq183FkE6tMj2WpQWQbXIdr4O+xZB9yhcD7tWF0GRwvUopLkXQXI9CteQFhhB\",\"dtype\":\"float64\",\"shape\":[51]},\"T\":{\"__ndarray__\":\"AAAAAAAAAACamZmZmZm5P5qZmZmZmck/NDMzMzMz0z+amZmZmZnZPwAAAAAAAOA/NDMzMzMz4z9nZmZmZmbmP5qZmZmZmek/zczMzMzM7D8AAAAAAADwP5qZmZmZmfE/NDMzMzMz8z/NzMzMzMz0P2dmZmZmZvY/AAAAAAAA+D+amZmZmZn5PzQzMzMzM/s/zczMzMzM/D9nZmZmZmb+PwAAAAAAAABAzczMzMzMAECamZmZmZkBQGdmZmZmZgJANDMzMzMzA0AAAAAAAAAEQM3MzMzMzARAmpmZmZmZBUBnZmZmZmYGQDQzMzMzMwdAAAAAAAAACEDNzMzMzMwIQJqZmZmZmQlAZ2ZmZmZmCkA0MzMzMzMLQAAAAAAAAAxAzczMzMzMDECamZmZmZkNQGdmZmZmZg5ANDMzMzMzD0AAAAAAAAAQQGdmZmZmZhBAzczMzMzMEEAzMzMzMzMRQJqZmZmZmRFAAAAAAAAAEkBnZmZmZmYSQM3MzMzMzBJANDMzMzMzE0CamZmZmZkTQAAAAAAAABRA\",\"dtype\":\"float64\",\"shape\":[51]},\"cum_exp\":{\"__ndarray__\":\"AAAAAAAAAAAAAAAAAIjDQPvXPwDhbtNAcPnYn+MA3UC+r9TrIz3jQEKW/32m7edA7f0f3xiS7ECe/KILTZXwQGsmV2+k2/JAquNHzyEc9UBnRPM41Fb3QLufHpPKi/lASy86nhO7+0CHqsP0veT9QCLy0wVsBABBm7ZRGbgTAUHwHlFKSiACQTE1D5wpKgNBV/G+/1wxBEHMoLdU6zUFQZDWomjbNwZBNeWp9zM3B0Hf46Ks+zMIQXQ/PSE5LglBJtkt3vIlCkGFs1pbLxsLQSwvBgD1DQxBQNj5Ikr+DEHOxbAKNewNQSiMge271w5BYcPH8eTAD0F4kQYX21MQQcwZmdQaxhBBUUxLrTQ3EUG4eCCVK6cRQUAqg3gCFhJBbLJYPLyDEkF4gRS+W/ASQQdNy9PjWxNBjwVGTFfGE0EBmxTvuC8UQSaRoHwLmBRBNGQ/rlH/FEETvkQ2jmUVQch8FMDDyhVBhYo08PQuFkHQh15kJJIWQTxIkbNU9BZBIiIibohVF0HVEc4dwrUXQcGwykUEFRhB\",\"dtype\":\"float64\",\"shape\":[51]},\"cum_har\":{\"__ndarray__\":\"AAAAAAAAAAAAAAAAAIjDQIkqkow6atNAfI4OCGPz3EDO1S5JEzDjQL+FVSmW2OdAS8hz3opz7EC88ti0n4DwQHpAMZn/wPJAJKCkkQn79EDWACXj4C73QEh3Ta+nXPlA3t/IAH+E+0DAXhHXhqb9QOkwkzHewv9A8T8ejdHsAEFVnMFXefUBQaCh9JZ0+wJBKXGD/ND+A0FIPBHSm/8EQfA4Lv3h/QVBpMw6A7D5BkEY3BoNEvMHQb77u+oT6ghBOA9xFsHeCUHquiW4JNEKQTzja6hJwQtBbVBlczqvDEHCa4tbAZsNQVDrVlyohA5BRSTJLDlsD0EpUOyg3igQQcE8YeiemhBBGfSg6GELEUF5rNf/K3sRQcslhG8B6hFB4pRwXeZXEkGxGKHU3sQSQWY/OMbuMBNBmRlSChqcE0F8UtZgZAYUQTi9QXLRbxRBUsFn0GTYFEH5CSz3IUAVQZvWNE0MpxVB8EWWJCcNFkG173a7dXIWQdccrjz71hZBcOlbwLo6F0H7l3tMt50XQVZZcNXz/xdB\",\"dtype\":\"float64\",\"shape\":[51]},\"cum_hyp\":{\"__ndarray__\":\"AAAAAAAAAAAAAAAAAIjDQCzYdXQScNNAeFwMwWEE3UAkQaENjEDjQD3/PsUv8+dAZvQO9DCa7EAnWeM30prwQMCTlXvP4vJAk/wMmRol9UC9b8nYvWH3QH+C4HfDmPlALjQCqDXK+0CHoH2PHvb9QLLZoiREDgBB6O56cr4eAUE+ZmszgywCQdCP8WOXNwNBGRLm+v8/BEFOR3/pwUUFQWCbUxviSAZBvepbdmVJB0HC4fXaUEcIQeRc5iOpQglBkMlbJnM7CkHFh/CxszELQWNMrZBvJQxBN4QLh6sWDUG9t/dTbAUOQaHv07C28Q5B+hl6UY/bD0EgOB9yfWEQQQDv+Aj/0xBBKTTyvk5FEUECy/PibrURQUhsKMFhJBJB5Pr9oimSEkEnuSbPyP4SQWJ+molBahNB4OyXE5bUE0FGqKWryD0UQVCMk43bpRRB9ON78tAMFUHnoMQQq3IVQYSTIBxs1xVBGqOQRRY7FkGbBmW7q50WQbJ9Pqku/xZBPIoPOKFfF0Esqh2OBb8XQcuRAs9dHRhB\",\"dtype\":\"float64\",\"shape\":[51]},\"hist_exp\":{\"__ndarray__\":\"AAAAAACIw0D2r38AwlXDQOpCMj8FJMNAGcygb8jywkAQmqtICsLCQK2egYTJkcJAOe2X4ARiwkBmTqEduzLCQPnphf/qA8JA5gVbTZPVwUCj2lrRsqfBQIJ83FhIesFA4NlLtFJNwUDgzSG30CDBQJRH3DfB9MBAVIX2DyPJwEAQZOEb9Z3AQGXC+zo2c8BAT/eKT+VIwEA+XLM+AR/AQJ/U4eAR679APdUfn/aYv0CSckuTrke/QE82E543975A0UubpY+nvkDfdG+VtFi+QIUidV6kCr5AtLHd9ly9vUBJyxha3HC9QCTnxoggJb1A6PGriCfavEAbFaJk74+8QE6hjCx2RrxA2BlL9bn9u0ABYqzYuLW7QA0LYvVwbrtAAsPzbuAnu0DB47JtBeK6QBMirh7enLpAdFyls2hYukAuif1ioxS6QIzDtGeM0blAwndWASKPuUBCre9zYk25QDZvAwhMDLlAyFJ/Ct3LuEDoGrDME4y4QGN5NqTuTLhAw+z76msOuED0uif/idC3QDQIFENHk7dA\",\"dtype\":\"float64\",\"shape\":[51]},\"hist_har\":{\"__ndarray__\":\"AAAAAACIw0ASVSQZdUzDQOXH+PZQEsNAQjqeFIfZwkDFv5qAC6LCQDAKedTSa8JAs3T4LNI2wkDsbcIi/wLCQFD9msNP0MFAjgUDjLqewUCUs0NhNm7BQK5E24u6PsFAEvdDsj4QwUBIkQ7UuuLAQMl3SkUntsBARcY1qnyKwECwVDDzs1/AQI747FjGNcBA+LHcWK0MwEABlZ9jxci/QHZ2ksHAeb9Aie4BPEEsv0DK9CO0O+C+QElvonallb5AQnaVNnRMvkBQCsUIngS+QCqmLV8Zvr1An2rDBN14vUC+8W8Z4DS9QKgeRw4a8rxAt4HvoYKwvEARJjvdEXC8QAvW7Q/AMLxA7heuzYXyu0CVVB7rW7W7QNvFG3s7ebtAwvMgzB0+u0BCrcll/AO7QMOMdgbRyrpAtDgOoZWSukAcr9paRFu6QJoGgYnXJLpAoSkSsUnvuUB2KDOClbq5QCPVW9i1hrlAMnEquKVTuUB4SMtNYCG5QD8mc+vg77hAv6LrByO/uEC8VjA9Io+4QG8RHEfaX7hA\",\"dtype\":\"float64\",\"shape\":[51]},\"hist_hyp\":{\"__ndarray__\":\"AAAAAACIw0BZsOvoJFjDQJgILZmeKMNAn0tstGz5wkBk+HbejsrCQKbUP7sEnMJAoffe7s1twkDJ1JEd6j/CQJZGu+tYEsJAU5nj/RnlwUAOlrj4LLjBQHSNDYGRi8FAyWLbO0dfwUDulkDOTTPBQGNTgd2kB8FAaHUHD0zcwEAYmWIIQ7HAQJckSG+JhsBATVOT6R5cwEAgQUUdAzLAQNH1hLA1CMBAn+A+k2y9v0A6ZA8eCWu/QImVrU5AGb9ApMaXchHIvkDIk5jXe3e+QHP6xst+J75AtHCGnRnYvUB8/IabS4m9QBNLxRQUO71ArciKWHLtvEAIuG22ZaC8QChKUX7tU7xAN7ZlAAkIvEBxUSiNt7y7QCCnY3X4cbtA3ZAvCssnu0CwTvGcLt66QIKfW38ilbpAb9luA6ZMukByAnl7uAS6QPboFTpZvblAojwvkod2uUAyp/zWQjC5QGXlA1yK6rhAJOAYdV2luECgxV12u2C4QKAiQ7SjHLhA6/uHgxXZt0DB5zk5EJa3QIcntSqTU7dA\",\"dtype\":\"float64\",\"shape\":[51]},\"index\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]},\"selected\":{\"id\":\"32cc6d82-14c6-42f6-bea1-ef0ea0770261\",\"type\":\"Selection\"},\"selection_policy\":{\"id\":\"2eefea7f-86b1-484c-9c91-b51a8ae85e4a\",\"type\":\"UnionRenderers\"}},\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"callback\":null,\"overlay\":{\"id\":\"eee3de91-63b5-4ce4-b539-0f4c464815a3\",\"type\":\"BoxAnnotation\"}},\"id\":\"11f7ea0d-6031-44c4-ab12-24b009a57784\",\"type\":\"BoxSelectTool\"},{\"attributes\":{\"overlay\":{\"id\":\"8988347d-9442-4bc4-bfb0-6189debe21e1\",\"type\":\"BoxAnnotation\"}},\"id\":\"c0019ceb-73c4-4b66-b35c-d90a9bcc900f\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"2eefea7f-86b1-484c-9c91-b51a8ae85e4a\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"a53e8922-eb4d-4450-b607-39fc6afaa234\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"b95526ff-61c0-47d3-b2a7-2ce9fa79ce12\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"plot\":null,\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"eee3de91-63b5-4ce4-b539-0f4c464815a3\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"aa108d35-b56c-4940-b78d-5edf94e46903\",\"type\":\"LinearScale\"},{\"attributes\":{\"source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"}},\"id\":\"2cd37407-feb2-4ff0-b30d-ff407403415b\",\"type\":\"CDSView\"},{\"attributes\":{\"below\":[{\"id\":\"554b9d39-eec8-49f4-984e-79a0a8cddb12\",\"type\":\"LinearAxis\"}],\"left\":[{\"id\":\"22af3a48-ed3c-4f1d-84a4-014f03a706a6\",\"type\":\"LinearAxis\"}],\"plot_height\":450,\"plot_width\":450,\"renderers\":[{\"id\":\"554b9d39-eec8-49f4-984e-79a0a8cddb12\",\"type\":\"LinearAxis\"},{\"id\":\"bca2893e-9aa1-4a5b-a48d-c8cb8ada1c0b\",\"type\":\"Grid\"},{\"id\":\"22af3a48-ed3c-4f1d-84a4-014f03a706a6\",\"type\":\"LinearAxis\"},{\"id\":\"6c547c6b-bd72-4c0a-8314-2328eafdc9af\",\"type\":\"Grid\"},{\"id\":\"28aeacfb-a2ca-41c8-a6e3-48ac2801424c\",\"type\":\"BoxAnnotation\"},{\"id\":\"7255657d-3996-4613-8df3-bfae37b2e8e4\",\"type\":\"BoxAnnotation\"},{\"id\":\"4b22a50c-5f75-4966-9660-c51d0bb31ba9\",\"type\":\"GlyphRenderer\"},{\"id\":\"6b995ccc-ba86-42bc-9f2c-a36b04a984c5\",\"type\":\"Legend\"},{\"id\":\"867b91fd-f6c3-4ec5-b424-37081176721f\",\"type\":\"GlyphRenderer\"},{\"id\":\"ad626066-2706-4fbf-bec0-8c94e25a74f0\",\"type\":\"GlyphRenderer\"},{\"id\":\"956ffbfb-3ed4-42bd-9916-57baabb3a63e\",\"type\":\"GlyphRenderer\"},{\"id\":\"c61d1354-856a-49c2-9101-44adbda22faf\",\"type\":\"GlyphRenderer\"}],\"title\":{\"id\":\"17283c24-99d9-42c9-b966-7e092ef2d612\",\"type\":\"Title\"},\"toolbar\":{\"id\":\"7e19bf37-cecb-455d-844a-92e364aa8d32\",\"type\":\"Toolbar\"},\"x_range\":{\"id\":\"b7d422e2-6153-481b-80bd-f4914b4c2d83\",\"type\":\"DataRange1d\"},\"x_scale\":{\"id\":\"aa108d35-b56c-4940-b78d-5edf94e46903\",\"type\":\"LinearScale\"},\"y_range\":{\"id\":\"47fde142-ebb5-4b3f-8d63-3b56ddac8cc0\",\"type\":\"DataRange1d\"},\"y_scale\":{\"id\":\"e5b3140d-28fe-46e9-9a6b-c037f054b625\",\"type\":\"LinearScale\"}},\"id\":\"f8832e17-53c0-428e-8e1e-3850a26d662e\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"plot\":null,\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"8988347d-9442-4bc4-bfb0-6189debe21e1\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"axis_label\":\"Time (yrs)\",\"formatter\":{\"id\":\"c5273fb1-b804-4ce8-a916-ab85e0974fae\",\"type\":\"BasicTickFormatter\"},\"plot\":{\"id\":\"f8832e17-53c0-428e-8e1e-3850a26d662e\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"ticker\":{\"id\":\"2b8e3c56-f0fa-4ef4-8f1f-68e664de3f03\",\"type\":\"BasicTicker\"}},\"id\":\"554b9d39-eec8-49f4-984e-79a0a8cddb12\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"2b8e3c56-f0fa-4ef4-8f1f-68e664de3f03\",\"type\":\"BasicTicker\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"cum_exp\"},\"y\":{\"field\":\"hist_exp\"}},\"id\":\"beea0e46-8d2f-45c8-a74c-aa91c3308adc\",\"type\":\"Line\"},{\"attributes\":{\"axis_label\":\"Oil Rate (Mstb/d)\",\"formatter\":{\"id\":\"b95526ff-61c0-47d3-b2a7-2ce9fa79ce12\",\"type\":\"BasicTickFormatter\"},\"plot\":{\"id\":\"f8832e17-53c0-428e-8e1e-3850a26d662e\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"ticker\":{\"id\":\"a8a92407-059b-42ea-90c1-1b8bef1c1b8c\",\"type\":\"BasicTicker\"}},\"id\":\"22af3a48-ed3c-4f1d-84a4-014f03a706a6\",\"type\":\"LinearAxis\"},{\"attributes\":{\"items\":[{\"id\":\"e4054dfa-ca9d-4681-9b7a-80c35376bce6\",\"type\":\"LegendItem\"},{\"id\":\"fff6f351-1559-4f3d-9b7f-56b1e6a964e1\",\"type\":\"LegendItem\"},{\"id\":\"55ea57e6-a49a-49b0-a0ae-553a9a1bbec6\",\"type\":\"LegendItem\"},{\"id\":\"47eb6b96-3042-42cc-b6e7-985c04d83c56\",\"type\":\"LegendItem\"}],\"plot\":{\"id\":\"5f4fe23a-3a49-436b-97bb-fd99bdeedb75\",\"subtype\":\"Figure\",\"type\":\"Plot\"}},\"id\":\"43503546-8296-41b1-a66d-bd6f3f20f253\",\"type\":\"Legend\"},{\"attributes\":{},\"id\":\"a8a92407-059b-42ea-90c1-1b8bef1c1b8c\",\"type\":\"BasicTicker\"},{\"attributes\":{\"use_scientific\":false},\"id\":\"60242735-0093-48d2-b7d2-a352e7b50c8b\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"data_source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"2e47e18d-5212-4454-8ac8-d49cdfd56320\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"beea0e46-8d2f-45c8-a74c-aa91c3308adc\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"bfc221fe-e93e-4444-bca2-b047d03136b9\",\"type\":\"CDSView\"}},\"id\":\"3d3f9660-ca65-4903-b3dd-a8a004712d8f\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"dimension\":1,\"plot\":{\"id\":\"f8832e17-53c0-428e-8e1e-3850a26d662e\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"ticker\":{\"id\":\"a8a92407-059b-42ea-90c1-1b8bef1c1b8c\",\"type\":\"BasicTicker\"}},\"id\":\"6c547c6b-bd72-4c0a-8314-2328eafdc9af\",\"type\":\"Grid\"},{\"attributes\":{\"line_color\":\"green\",\"line_width\":2,\"x\":{\"field\":\"cum_hyp\"},\"y\":{\"field\":\"hist_hyp\"}},\"id\":\"b66b6eef-8dc4-40e6-9161-5e26375f43ea\",\"type\":\"Line\"},{\"attributes\":{\"source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"}},\"id\":\"d9996037-32c6-4d9d-bbfe-8d929f817812\",\"type\":\"CDSView\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b4\"},\"line_color\":{\"value\":\"#1f77b4\"},\"line_width\":{\"value\":2},\"size\":{\"units\":\"screen\",\"value\":5},\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"Q\"}},\"id\":\"60ff7e6d-846f-4cfd-ba3d-f5ec7b4db963\",\"type\":\"Circle\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"cum_hyp\"},\"y\":{\"field\":\"hist_hyp\"}},\"id\":\"6f2b7ee0-dc43-4e16-9661-551b9ca0b6b9\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"32cc6d82-14c6-42f6-bea1-ef0ea0770261\",\"type\":\"Selection\"},{\"attributes\":{\"data_source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"b66b6eef-8dc4-40e6-9161-5e26375f43ea\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"6f2b7ee0-dc43-4e16-9661-551b9ca0b6b9\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"d9996037-32c6-4d9d-bbfe-8d929f817812\",\"type\":\"CDSView\"}},\"id\":\"8fb1ff19-22eb-47da-a19b-1530fc173876\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"e5b3140d-28fe-46e9-9a6b-c037f054b625\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"805d4d26-1984-43fd-8e7d-b0bbb6babe67\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"4f8bbfce-bdc1-48f7-8bf8-d7c91326e762\",\"type\":\"PanTool\"},{\"id\":\"aea07de6-7424-45cc-aaa5-87a10a64c7de\",\"type\":\"BoxSelectTool\"},{\"id\":\"6363f927-9906-4970-91ca-52f6a528ea5c\",\"type\":\"BoxZoomTool\"},{\"id\":\"a61b0e2f-4c31-4ae6-b3ee-330f07ea9132\",\"type\":\"ResetTool\"}]},\"id\":\"7e19bf37-cecb-455d-844a-92e364aa8d32\",\"type\":\"Toolbar\"},{\"attributes\":{\"label\":{\"value\":\"Hyperbolic\"},\"renderers\":[{\"id\":\"8fb1ff19-22eb-47da-a19b-1530fc173876\",\"type\":\"GlyphRenderer\"}]},\"id\":\"fff6f351-1559-4f3d-9b7f-56b1e6a964e1\",\"type\":\"LegendItem\"},{\"attributes\":{\"plot\":null,\"text\":\"Rate Time Plot\"},\"id\":\"17283c24-99d9-42c9-b966-7e092ef2d612\",\"type\":\"Title\"},{\"attributes\":{\"line_color\":\"blue\",\"line_width\":2,\"x\":{\"field\":\"cum_har\"},\"y\":{\"field\":\"hist_har\"}},\"id\":\"fb9117a3-098f-4d10-9580-ea534984c12b\",\"type\":\"Line\"},{\"attributes\":{\"source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"}},\"id\":\"2340f7f9-cece-4d96-aaf3-f0434294cce8\",\"type\":\"CDSView\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"cum_har\"},\"y\":{\"field\":\"hist_har\"}},\"id\":\"4b4eab4d-dcda-4c95-89bd-e15569d4d715\",\"type\":\"Line\"},{\"attributes\":{\"data_source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"60ff7e6d-846f-4cfd-ba3d-f5ec7b4db963\",\"type\":\"Circle\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"4d1d308d-ce41-4279-a950-3f5bdfeb5cd5\",\"type\":\"Circle\"},\"selection_glyph\":null,\"view\":{\"id\":\"65441820-7ffa-41c6-9d67-946efbaf26d9\",\"type\":\"CDSView\"}},\"id\":\"4b22a50c-5f75-4966-9660-c51d0bb31ba9\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"}},\"id\":\"007ab149-a5fd-494d-b1b4-f63858b5b709\",\"type\":\"CDSView\"},{\"attributes\":{\"label\":{\"value\":\"Exponential\"},\"renderers\":[{\"id\":\"867b91fd-f6c3-4ec5-b424-37081176721f\",\"type\":\"GlyphRenderer\"}]},\"id\":\"c5cca785-0abc-41cf-85df-fce3c215ca28\",\"type\":\"LegendItem\"},{\"attributes\":{\"data_source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"fb9117a3-098f-4d10-9580-ea534984c12b\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"4b4eab4d-dcda-4c95-89bd-e15569d4d715\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"007ab149-a5fd-494d-b1b4-f63858b5b709\",\"type\":\"CDSView\"}},\"id\":\"015de84c-5598-4d18-91e7-14557b9c8e56\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"4f8bbfce-bdc1-48f7-8bf8-d7c91326e762\",\"type\":\"PanTool\"},{\"attributes\":{\"callback\":null,\"overlay\":{\"id\":\"28aeacfb-a2ca-41c8-a6e3-48ac2801424c\",\"type\":\"BoxAnnotation\"}},\"id\":\"aea07de6-7424-45cc-aaa5-87a10a64c7de\",\"type\":\"BoxSelectTool\"},{\"attributes\":{\"label\":{\"value\":\"Harmonic\"},\"renderers\":[{\"id\":\"015de84c-5598-4d18-91e7-14557b9c8e56\",\"type\":\"GlyphRenderer\"}]},\"id\":\"55ea57e6-a49a-49b0-a0ae-553a9a1bbec6\",\"type\":\"LegendItem\"},{\"attributes\":{\"overlay\":{\"id\":\"7255657d-3996-4613-8df3-bfae37b2e8e4\",\"type\":\"BoxAnnotation\"}},\"id\":\"6363f927-9906-4970-91ca-52f6a528ea5c\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"line_color\":\"orange\",\"line_width\":2,\"x\":{\"field\":\"cum_hyp\"},\"y\":{\"field\":\"fore_hyp\"}},\"id\":\"58714cd2-045b-4b0c-9a2d-d193f5deba5c\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"a61b0e2f-4c31-4ae6-b3ee-330f07ea9132\",\"type\":\"ResetTool\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"cum_hyp\"},\"y\":{\"field\":\"fore_hyp\"}},\"id\":\"d1cc6526-1428-4adb-87cd-01e61774f902\",\"type\":\"Line\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"plot\":null,\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"28aeacfb-a2ca-41c8-a6e3-48ac2801424c\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"source\":{\"id\":\"bd7d62d8-3fba-4045-9465-9cdc407d3eb3\",\"type\":\"ColumnDataSource\"}},\"id\":\"dcef9263-a3a2-4482-82c5-ec3ba4d57432\",\"type\":\"CDSView\"},{\"attributes\":{\"callback\":null},\"id\":\"b7d422e2-6153-481b-80bd-f4914b4c2d83\",\"type\":\"DataRange1d\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"line_width\":{\"value\":2},\"size\":{\"units\":\"screen\",\"value\":5},\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"Q\"}},\"id\":\"4d1d308d-ce41-4279-a950-3f5bdfeb5cd5\",\"type\":\"Circle\"},{\"attributes\":{\"data_source\":{\"id\":\"bd7d62d8-3fba-4045-9465-9cdc407d3eb3\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"58714cd2-045b-4b0c-9a2d-d193f5deba5c\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"d1cc6526-1428-4adb-87cd-01e61774f902\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"dcef9263-a3a2-4482-82c5-ec3ba4d57432\",\"type\":\"CDSView\"}},\"id\":\"cffc0a1f-54e5-4434-8e03-8d214f86cc5a\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"plot\":null,\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"7255657d-3996-4613-8df3-bfae37b2e8e4\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"}},\"id\":\"65441820-7ffa-41c6-9d67-946efbaf26d9\",\"type\":\"CDSView\"},{\"attributes\":{\"label\":{\"value\":\"Forecast\"},\"renderers\":[{\"id\":\"cffc0a1f-54e5-4434-8e03-8d214f86cc5a\",\"type\":\"GlyphRenderer\"}]},\"id\":\"47eb6b96-3042-42cc-b6e7-985c04d83c56\",\"type\":\"LegendItem\"},{\"attributes\":{\"items\":[{\"id\":\"c5cca785-0abc-41cf-85df-fce3c215ca28\",\"type\":\"LegendItem\"},{\"id\":\"d2fbe0dc-ae62-46e7-bce6-7d166617340b\",\"type\":\"LegendItem\"},{\"id\":\"0d164abe-5fa8-465a-a9b9-c5f489159790\",\"type\":\"LegendItem\"},{\"id\":\"c5dc4769-7137-409e-9bfb-b987c32d1f23\",\"type\":\"LegendItem\"}],\"plot\":{\"id\":\"f8832e17-53c0-428e-8e1e-3850a26d662e\",\"subtype\":\"Figure\",\"type\":\"Plot\"}},\"id\":\"6b995ccc-ba86-42bc-9f2c-a36b04a984c5\",\"type\":\"Legend\"},{\"attributes\":{\"children\":[{\"id\":\"f8832e17-53c0-428e-8e1e-3850a26d662e\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"id\":\"5f4fe23a-3a49-436b-97bb-fd99bdeedb75\",\"subtype\":\"Figure\",\"type\":\"Plot\"}]},\"id\":\"d9203113-4022-4a89-ba7b-4e829106896d\",\"type\":\"Row\"},{\"attributes\":{},\"id\":\"9be46038-0e40-4ae9-be26-715fbab801c5\",\"type\":\"Selection\"},{\"attributes\":{\"line_color\":\"red\",\"line_width\":2,\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"hist_exp\"}},\"id\":\"fcae1bb8-f291-4b62-a65f-4b458409768e\",\"type\":\"Line\"},{\"attributes\":{\"data_source\":{\"id\":\"1f57a3e9-f2ba-45af-a086-7c5a354197b0\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"fcae1bb8-f291-4b62-a65f-4b458409768e\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"fda5c578-9959-417e-bcc7-58a73fa93266\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"2340f7f9-cece-4d96-aaf3-f0434294cce8\",\"type\":\"CDSView\"}},\"id\":\"867b91fd-f6c3-4ec5-b424-37081176721f\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"T\"},\"y\":{\"field\":\"hist_exp\"}},\"id\":\"fda5c578-9959-417e-bcc7-58a73fa93266\",\"type\":\"Line\"}],\"root_ids\":[\"d9203113-4022-4a89-ba7b-4e829106896d\"]},\"title\":\"Bokeh Application\",\"version\":\"0.12.16\"}};\n",
       "  var render_items = [{\"docid\":\"7cb92d7f-2532-495b-8fdc-ad16bf9912b9\",\"elementid\":\"b57c1c19-71f4-43b5-815a-50282f2ee5e0\",\"modelid\":\"d9203113-4022-4a89-ba7b-4e829106896d\"}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        embed_document(root);\n",
       "        clearInterval(timer);\n",
       "      }\n",
       "      attempts++;\n",
       "      if (attempts > 100) {\n",
       "        console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\")\n",
       "        clearInterval(timer);\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "d9203113-4022-4a89-ba7b-4e829106896d"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "source_hist = ColumnDataSource(df)\n",
    "source_pred = ColumnDataSource(df_forecast)\n",
    "\n",
    "tools = \"pan,box_select,box_zoom,reset\"\n",
    "\n",
    "# Rate Time plot\n",
    "QT = figure(title='Rate Time Plot', plot_width=450, plot_height=450, \n",
    "            x_axis_label='Time (yrs)', y_axis_label='Oil Rate (Mstb/d)', \n",
    "            tools=tools)\n",
    "\n",
    "QT.scatter(x='T', y='Q', marker='o', size=5, line_width=2, source=source_hist)\n",
    "QT.line(x='T' , y='hist_exp', legend='Exponential', color='red', line_width=2, source=source_hist)\n",
    "QT.line(x='T' , y='hist_hyp', legend='Hyperbolic', color='green', line_width=2, source=source_hist)\n",
    "QT.line(x='T' , y='hist_har', legend='Harmonic', color='blue', line_width=2, source=source_hist)\n",
    "\n",
    "QT.line(x='T' , y=forecast_type, legend='Forecast', color='orange', line_width=2, source=source_pred)\n",
    "\n",
    "# Rate Cum plot\n",
    "QQc = figure(title='Rate Cum Plot', plot_width=450, plot_height=450, \n",
    "             x_axis_label='Cum Oil (stb)', y_axis_label='Oil Rate (Mstb/d)',\n",
    "             y_range=QT.y_range,\n",
    "             tools=tools)\n",
    "\n",
    "QQc.scatter(x='Qcum', y='Q', marker='o', size=5, line_width=2, source=source_hist)\n",
    "QQc.line(x='cum_exp' , y='hist_exp', legend='Exponential', color='red', line_width=2, source=source_hist)\n",
    "QQc.line(x='cum_hyp' , y='hist_hyp', legend='Hyperbolic', color='green', line_width=2, source=source_hist)\n",
    "QQc.line(x='cum_har' , y='hist_har', legend='Harmonic', color='blue', line_width=2, source=source_hist)\n",
    "\n",
    "QQc.line(x=cum_type , y=forecast_type, legend='Forecast', color='orange', line_width=2, source=source_pred)\n",
    "\n",
    "QQc.xaxis[0].formatter.use_scientific = False\n",
    "QQc.xaxis.major_label_orientation = pi/4\n",
    "\n",
    "# Joint plot\n",
    "p = row(QT, QQc)\n",
    "\n",
    "show(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
